version = 1.0
corpus = opensonar
blsUrlInternal = http://localhost:8080/blacklab-server
blsUrlExternal = /blacklab-server
homeUrl = ../web/home_en.html
documents.total = 2066008
tokens.total = 554292003
error = Something went wrong!
title = OpenSoNaR
description = A web-based interface to the SoNaR Dutch Reference Corpus
home = Home
explore = Explore
search = Search
simple = Simple
extended = Extended
advanced = Advanced
expert = Expert
result = Results
document = Document
meta = Metadata filters
reset = Reset
other = Other
logo = ../web/img/logo.png
unknown = Unknown
searchfields = word,lemma,pos

cookies.line1 = This website uses cookies to enhance your user experience.
cookies.line2 = (When you click "OK" a cookie is placed on your computer to hide this pop-up. The cookie does not contain any personal information.)

explore.treemap = Corpus
explore.ngram = N-grams
explore.ngram.size = N-gram size
explore.ngram.type = N-gram type
explore.ngram.count = Number of n-grams
explore.statistics = Statistics
explore.statistics.tabs.freqlist = Frequency list
explore.statistics.tabs.doclist = Document list
explore.statistics.tabs.growth = Vocabulary growth
explore.statistics.tabs.cloud = Word cloud
explore.statistics.type = Frequency list type
explore.statistics.count = Unique hits
explore.document = Document
explore.document.placeholder = Document ID

result.per_hit = Hits
result.per_doc = Documents
result.grouped_per_hit = Grouped hits
result.grouped_per_doc = Grouped documents
result.grouped_header = Grouped by
result.queries = Queries
result.results = Query results
result.query = Query
result.within = within
result.filters = Metadata filters
result.grouping = Grouping
result.status = Status
result.group = Group
result.hits = Hits
result.documents = Documents
result.export = Export
result.pagination.show = Show
result.by = by
result.pos_name = pos
result.per_page = per page
result.titles = titles
result.page = Page  
result.go = Go
result.of = of  
result.detailed_concordances = View detailed documents in this group
result.loadmore = Load more

result.export.totalhits = Total hits
result.export.totaldocs = Total documents
result.export.totalgroups = Total groups
result.export.totalexported = Total exported
result.export.layout = Layout

document.tab.text = Text
document.tab.statistics = Statistics
document.tab.metadata = Metadata
document.tab.cloud = Word Cloud

document.meta.field.title = TextTitle
document.meta.field.author = AuthorNameOrPseudonym
document.meta.field.description = TextDescription
document.meta.field.docid = id
document.meta.field.texttype = TextType
document.meta.field.collection = CollectionName
document.meta.field.licensecode = LicenseCode
document.meta.field.licensedate = LicenseDate
document.meta.field.date = PublicationDate
document.meta.field.country = Country
document.meta.field.continent = Continent
document.meta.field.language = LanguageName
document.meta.field.file = fromInputFile

document.meta.doctitle = Document title
document.meta.author = Author
document.meta.docid = Document ID
document.meta.texttype = Text type
document.meta.collection = Collection
document.meta.licensecode = License code
document.meta.licensedate = License date
document.meta.country = Country
document.meta.continent = Continent
document.meta.language = Language
document.meta.file = File name
document.meta.token_count = Words
document.view = Show document
document.hit.next = Next hit
document.hit.previous = Previous hit

document.pospie.title = Part-of-Speech distribution
document.tokenpospie.title = Token / Part-of-Speech distribution
document.lemmapospie.title = Lemma / Part-of-Speech distribution
document.posdata.title = Part-of-Speech statistics
document.stats.title = Document statistics
document.growth.title = Vocabulary growth
document.growth.column1 = Unique types
document.growth.column2 = Unique lemmas
document.growth.label1 = type
document.growth.label2 = lemma
document.cloud.split = Split per part of speech

word = word
word.index = 0
lemma = lemma
lemma.index = 1
pos = p.o.s.
pos.index = 2
pos.1.value = ADJ.*
pos.1.name = Adjective
pos.2.value = BW.*
pos.2.name = Adverb
pos.3.value = VG.*
pos.3.name = Conjunction
pos.4.value = LID.*
pos.4.name = Determiner
pos.5.value = TSW.*
pos.5.name = Interjection
pos.6.value = N.*
pos.6.name = Noun
pos.7.value = TW.*
pos.7.name = Numeral
pos.8.value = VZ.*
pos.8.name = Preposition
pos.9.value = VNW.*
pos.9.name = Pronoun
pos.10.value = SPEC.*
pos.10.name = Proper name
pos.11.value = LET.*
pos.11.name = Punctuation
pos.12.value = WW.*
pos.12.name = Verb

left = left
right = right
case = Case sensitive
context = Context

simple.placeholder = Search for a word...

extended.word.placeholder = Search for a word...
extended.lemma.placeholder = Search for a lemma...

advanced.placeholder = &lt;any&gt;
advanced.boxheader = Match <b>one or more</b> of these rules:
advanced.is = is
advanced.not = is not
advanced.starts = starts with
advanced.ends = ends with
advanced.contains = contains
advanced.regex = regex
advanced.erase = Erase list
advanced.repeat = repeat
advanced.to = to
advanced.times = times
advanced.sentencestart = start of sentence
advanced.sentenceend = end of sentence

expert.boxheader = Corpus Query Language

meta.header = Match these rules:
meta.is = is
meta.not = is not
meta.group = Group
meta.group.hits = hits
meta.group.documents = documents
meta.group.by = by
meta.within = Search within
meta.within.document = document
meta.within.paragraph = paragraph
meta.within.sentence = sentence

metadataFields.TextType = Text type
metadataFields.TextType.multiple = true
metadataFields.Sex = Sex
metadataFields.Sex.multiple = true
metadataFields.Published = Published
metadataFields.Published.multiple = true
metadataFields.Country = Country
metadataFields.Country.multiple = true
metadataFields.Publisher = Publisher
metadataFields.Publisher.multiple = true
metadataFields.Town = City
metadataFields.Town.multiple = true
metadataFields.PublicationName = Publication name
metadataFields.Age = Age
metadataFields.OriginalLanguage = Original language
metadataFields.OriginalLanguage.multiple = true
metadataFields.PublicationDate = Publication date
metadataFields.LicenseCode = License code
metadataFields.LicenseCode.multiple = true
metadataFields.Translated = Translated
metadataFields.Translated.multiple = true
metadataFields.CollectionName = Collection name
metadataFields.CollectionName.multiple = true
metadataFields.PublicationPlace = Place of publication
metadataFields.PublicationPlace.multiple = true
metadataFields.TextKeyword = Keyword
metadataFields.TextKeyword.multiple = true
metadataFields.TranslatorName = Translator
metadataFields.SourceName = Source name
metadataFields.SourceName.multiple = true
metadataFields.AuthorNameOrPseudonym = Author name / Pseudonym
metadataFields.AuthorNameOrPseudonym.multiple = true
metadataFields.TextDescription = Text description

cql.info.header = Examples of valid queries in <a href="https://github.com/INL/BlackLab/wiki/Blacklab-query-tool#Corpus_Query_Language" target="_blank">Corpus Query Language (CQL)</a>:
cql.info.query.1.text = Search for the word "appel" or the word "peer"
cql.info.query.1.code.1 = ["appel" | "peer"] <span class="non_cql">or</span> ["(?i)appel"|"(?i)peer"] <span class="non_cql">(case insensitive)</span>
cql.info.query.1.code.2 = ["(?c)appel"|"(?c)peer"] <span class="non_cql">(case sensitive)</span>
cql.info.query.1.code.3 = [word="(appel|peer)"]
cql.info.query.1.code.4 = [word="(?c)(appel|peer)"] <span class="non_cql">(case sensitive)</span>
cql.info.query.2.text = Search for the word "de" followed by a word that starts with "app"
cql.info.query.2.code.1 = ["de"] ["app.*"]
cql.info.query.3.text = Search for the word "zijn" as a verb
cql.info.query.3.code.1 = ["zijn" & pos="WW.*"]
cql.info.query.4.text = Search for any form of "zijn" as a verb
cql.info.query.4.code.1 = [lemma="zijn" & pos="WW.*"]
cql.info.query.5.text = Search for any form of "zijn" followed by any form of "blijven"
cql.info.query.5.code.1 = [lemma="zijn"] [lemma="blijven"]
cql.info.query.6.text = Search for exactly two consecutive words starting with "de"
cql.info.query.6.code.1 = "de.*"\{2\}
cql.info.query.7.text = Search for two or more consecutive words starting with "de"
cql.info.query.7.code.1 = "de.*"{2,}
cql.info.query.8.text = Search for the word "het" followed by a gender specific noun
cql.info.query.8.code.1 = "het" [pos="N.*zijd.*"]
cql.info.query.9.text = Search for one or more consecutive adjectives followed by the word "appel"
cql.info.query.9.code.1 = [pos="ADJ.*"]+ "appel"
cql.info.query.9.code.2 = [pos="ADJ.*"]{1,} "appel"
cql.info.query.10.text = Search for the word "de" followed by the word "hond" with a distance of max. 3 words
cql.info.query.10.code.1 = "de" []{0,3} "hond"
